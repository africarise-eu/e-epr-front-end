stages:
    - dockerize
    - deploy

.create_env_file:
    before_script:
        - cat $env_file > .env

.create_uat_env_file:
    before_script:
        - cat $env_uat_file > .env
.create_prod_env_file:
    before_script:
        - cat $env_prod_file > .env

.ignore_git_checkout:
  variables:
    GIT_STRATEGY: none

## dev - conditions ##
.tags_deploy-env_trigger_condition-dev:
    tags:
        - tae-ui-dev 
    environment:
        name: dev
    variables:
        IMAGE_NAME: tae-ui-dev
        CONTAINER_NAME: tae-ui-dev
        DOCKER_HOST_PORT: 8080

## dev Jobs for manual build except develop branch ##
image_build_dev:
    stage: dockerize
    extends:
        - .tags_deploy-env_trigger_condition-dev
        - .create_env_file
    when: manual
    except:
        - develop
    script:
        - docker build -t $IMAGE_NAME:$CI_PIPELINE_IID .
        - docker tag $IMAGE_NAME:$CI_PIPELINE_IID $IMAGE_NAME:latest

deploy_dev:
    stage: deploy
    extends:
        - .ignore_git_checkout
        - .tags_deploy-env_trigger_condition-dev
    needs:
        - image_build_dev
    except:
        - develop
    script:
        - docker rm -f `docker ps -a --no-trunc | grep $CONTAINER_NAME | awk '{ print $1}'` 2> /dev/null || echo 0
        - docker run -d --restart unless-stopped -p $DOCKER_HOST_PORT:80 --name $CONTAINER_NAME $IMAGE_NAME:latest
        - "echo -e \"LatestImage: $IMAGE_NAME:$CI_PIPELINE_IID\""
        - docker images | grep "$IMAGE_NAME" | awk '{print $3}' | grep -v $(docker images | grep $IMAGE_NAME |grep latest |awk '{print $3}') | xargs docker rmi || echo 0

## dev Jobs for develop branch ##
image_build_dev_develop-br:
    stage: dockerize
    extends:
        - .tags_deploy-env_trigger_condition-dev
        - .create_env_file
    only:
        - develop
    script:
        - docker build -t $IMAGE_NAME:$CI_PIPELINE_IID .
        - docker tag $IMAGE_NAME:$CI_PIPELINE_IID $IMAGE_NAME:latest

deploy_dev_develop-br:
    stage: deploy
    extends:
        - .ignore_git_checkout
        - .tags_deploy-env_trigger_condition-dev
    needs:
        - image_build_dev_develop-br
    only:
        - develop
    script:
        - docker rm -f `docker ps -a --no-trunc | grep $CONTAINER_NAME | awk '{ print $1}'` 2> /dev/null || echo 0
        - docker run -d --restart unless-stopped -p $DOCKER_HOST_PORT:80 --name $CONTAINER_NAME $IMAGE_NAME:latest
        - "echo -e \"LatestImage: $IMAGE_NAME:$CI_PIPELINE_IID\""
        - docker images | grep "$IMAGE_NAME" | awk '{print $3}' | grep -v $(docker images | grep $IMAGE_NAME |grep latest |awk '{print $3}') | xargs docker rmi || echo 0

## uat - conditions ##
.tags_deploy-env_trigger_condition-uat:
    tags:
        - tae-ui-uat
    environment:
        name: uat
    variables:
        IMAGE_NAME: tae-ui-uat
        CONTAINER_NAME: tae-ui-uat
        DOCKER_HOST_PORT: 3555



## uat Jobs for uat branch ##
image_build_uat_uat-br:
    stage: dockerize
    extends:
        - .tags_deploy-env_trigger_condition-uat
        - .create_uat_env_file
    only:
        - UAT
    script:
        - docker build -t $IMAGE_NAME:$CI_PIPELINE_IID .
        - docker tag $IMAGE_NAME:$CI_PIPELINE_IID $IMAGE_NAME:latest

deploy_uat_uat-br:
    stage: deploy
    extends:
        - .ignore_git_checkout
        - .tags_deploy-env_trigger_condition-uat
    needs:
        - image_build_uat_uat-br
    only:
        - UAT
    script:
        - docker rm -f `docker ps -a --no-trunc | grep $CONTAINER_NAME | awk '{ print $1}'` 2> /dev/null || echo 0
        - docker run -d --restart unless-stopped  -p $DOCKER_HOST_PORT:80 --name $CONTAINER_NAME $IMAGE_NAME:latest
        - "echo -e \"LatestImage: $IMAGE_NAME:$CI_PIPELINE_IID\""
        - docker images | grep "$IMAGE_NAME" | awk '{print $3}' | grep -v $(docker images | grep $IMAGE_NAME |grep latest |awk '{print $3}') | xargs docker rmi || echo 0

## prod - conditions ##
.tags_deploy-env_trigger_condition-prod:
    tags:
        - tae-ui-prod
    environment:
        name: production
    variables:
        IMAGE_NAME: tae-ui-prod
        CONTAINER_NAME: tae-ui-prod
        DOCKER_HOST_PORT: 3555



## prod Jobs for uat branch ##
image_build_prod-br:
    stage: dockerize
    extends:
        - .tags_deploy-env_trigger_condition-prod
        - .create_prod_env_file
    only:
        - main
    script:
        - docker build -t $IMAGE_NAME:$CI_PIPELINE_IID .
        - docker tag $IMAGE_NAME:$CI_PIPELINE_IID $IMAGE_NAME:latest

deploy_prod-br:
    stage: deploy
    extends:
        - .ignore_git_checkout
        - .tags_deploy-env_trigger_condition-prod
    needs:
        - image_build_prod-br
    only:
        - main
    script:
        - docker rm -f `docker ps -a --no-trunc | grep $CONTAINER_NAME | awk '{ print $1}'` 2> /dev/null || echo 0
        - docker run -d --restart unless-stopped  -p $DOCKER_HOST_PORT:80 --name $CONTAINER_NAME $IMAGE_NAME:latest
        - "echo -e \"LatestImage: $IMAGE_NAME:$CI_PIPELINE_IID\""
        - docker images | grep "$IMAGE_NAME" | awk '{print $3}' | grep -v $(docker images | grep $IMAGE_NAME |grep latest |awk '{print $3}') | xargs docker rmi || echo 0